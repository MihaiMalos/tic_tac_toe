// Mocks generated by Mockito 5.4.2 from annotations
// in tic_tac_toe_game/test/game_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tic_tac_toe_lib/tic_tac_toe_lib.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Game].
///
/// See the documentation for Mockito's code generation for more information.
class MockGame extends _i1.Mock implements _i2.Game {
  @override
  _i2.Mark get turn => (super.noSuchMethod(
        Invocation.getter(#turn),
        returnValue: _i2.Mark.x,
        returnValueForMissingStub: _i2.Mark.x,
      ) as _i2.Mark);
  @override
  int get boardSize => (super.noSuchMethod(
        Invocation.getter(#boardSize),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  List<List<_i2.Mark>> get boardRepresentation => (super.noSuchMethod(
        Invocation.getter(#boardRepresentation),
        returnValue: <List<_i2.Mark>>[],
        returnValueForMissingStub: <List<_i2.Mark>>[],
      ) as List<List<_i2.Mark>>);
  @override
  Duration get timerDuration => (super.noSuchMethod(
        Invocation.getter(#timerDuration),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#timerDuration),
        ),
        returnValueForMissingStub: _FakeDuration_0(
          this,
          Invocation.getter(#timerDuration),
        ),
      ) as Duration);
  @override
  Duration get timerElapsedTime => (super.noSuchMethod(
        Invocation.getter(#timerElapsedTime),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#timerElapsedTime),
        ),
        returnValueForMissingStub: _FakeDuration_0(
          this,
          Invocation.getter(#timerElapsedTime),
        ),
      ) as Duration);
  @override
  set strategy(_i2.Strategy strategy) => super.noSuchMethod(
        Invocation.setter(
          #strategy,
          strategy,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void startTimer() => super.noSuchMethod(
        Invocation.method(
          #startTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stopTimer() => super.noSuchMethod(
        Invocation.method(
          #stopTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<void> placeMark(_i2.Position? pos) => (super.noSuchMethod(
        Invocation.method(
          #placeMark,
          [pos],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void restart() => super.noSuchMethod(
        Invocation.method(
          #restart,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool addObserver(_i2.GameObserver? observer) => (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [observer],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool removeObserver(_i2.GameObserver? observer) => (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [observer],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
